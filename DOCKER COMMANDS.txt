Когда вы закончите, то можете погасить контейнер Docker.
  docker-compose down
  
Просто приостановить контейнер
  docker stop CONTAINER ID 

Запустить ранее остановленный контейнер
  docker start CONTAINER ID

Перегрузить контейнер
  docker restart CONTAINER ID

Просмотр images (какие есть образы локально)
===============

	sudo docker images

Просмотр запущенных контейнеров
================================

	sudo docker ps
	
Просмотр всех контейнеров
================================

	sudo docker ps -a	

Создадим образ, укажем имя, укажем путь от куда будем собирать где:
Создадим образ - docker build
тег на имя - -t hello-world
от куда собираем, укажем текущая директория как точка- .
==============================================================

	sudo docker build -t hello-world .
	
Запуск контейнера
=============

	sudo docker run <name repository or image id>
	
	
Запуск контейнера с присвоенным ему именем
===========================================

	sudo docker run --name <new name> <name repository or image id> 
	
либо запуск контейнера в фоне (-d)

	sudo docker run -name <new name> -d <name repository or image id>
	
Запустить контейнер и после остановки автоматом удалить его (--rm)
==============================================================

	sudo docker run -name <new name> -d --rm <name repository or image id>
	
Запустить контейнер на определенном порту	
===========================================
	
	sudo docker run --rm --name web -p 8080:8080 web-hello
	
Запустить контейнер с указанием временной зоны
===============================================

	sudo docker run --rm --name web -p 8080:8080 -e TZ=Europe/Moskow web-hello
	
Посмотреть абсолютный путь к папке
===================================

	(venv) mihail@mihail-desktop:~/Django_projects/Docker training/web-hello-world$ cd resourses/
	(venv) mihail@mihail-desktop:~/Django_projects/Docker training/web-hello-world/resourses$ pwd
	/home/mihail/Django_projects/Docker training/web-hello-world/resourses
	
Запустить контейнер с указанием пути где будут меняться данные
==============================================================
где:
путь хостовой машины от куда будут браться данные (-v /home/mihail/Django_projects/Docker training/web-hello-world/resourses)
абсолютный путь внутри docker контейнера, указанный куда копируются данные контейнера, указано в файле "Dockerfile" - /usr/src/app/ плюс папка где происходят изменения
========================================================================================================================================================================

	sudo docker run --rm --name web -p 8080:8080 -e TZ=Europe/Moskow -v /home/mihail/Django_projects/Docker training/web-hello-world/resourses:/usr/src/app/resourses  web-hello

Просмотр docker volume
=========================

	sudo docker volume ls
	
Создание docker volume
=======================

	sudo docker volume create web

Прикрепим к docker volem web
в котором будут сохраняться данные
==================================
	
	sudo docker run --rm --name web -p 8080:8080 -e TZ=Europe/Moskow -v web:/usr/src/app/resourses  web-hello

Остановить запущенный контейнер
===============================

	sudo docker stop <container id or names>
	
Удалить контейнер из списков
============================

	sudo docker rm <container id or names>	
	
Удалить все контейнеры из списков
=================================

	sudo docker rm $(sudo docker ps -qa)
	
Удаление всех образов
=====================

	docker rmi $(docker images -a -q)

Удаление одного или нескольких конкретных образов
==================================================

	docker rmi <Image id or name>

Иногда может понадобиться зайти в работающий контейнер. Для этого нужно запустить команду запуска интерактивной оболочкой bash
  docker exec -it CONTAINER ID bash


Install Docker on Ubuntu 18.04
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
```
sudo apt update
sudo apt install apt-transport-https
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update
sudo apt install docker-ce
sudo systemctl status docker

что бы постоянно не прописывать sudo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sudo usermod -aG docker $USER

после чего перезагрузимся
>>>logout/login<<<
```

узнать свой айпи адрес
~~~~~~~~~~~~~~~~~~~~~~~
ifconfig

проверка работы
~~~~~~~~~~~~~~~~~~~
docker run hello-world

просмотр
~~~~~~~~
docker ps
docker ps -a
docker images


docker search tomcat
docker pull tomcat

запускаем интерактивно с перенаправлением портов с 8080 на 1234
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker run -it -p 1234:8080 tomcat
docker run -it -p 8888:80 nginx

запускаем не интерактивно с перенаправлением портов с 80 на 8888
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker run -d -p 8888:80 nginx



docker build -t denis .
docker images

docker run -it  -p 1234:80  denis:latest
docker run -d -p  1234:80  denis:latest

docker  ps     # list containers
docker  ps -a  # list all containers

docker tag denis_ubuntu denis_ubuntu-PROD
docker tag denis_ubuntu denis_ubuntu-PROD:v2

docker rm   # delete container
docker rmi  # delete image

UPDATE IMAGE
~~~~~~~~~~~~~
docker run -d -p 7777:80 denis_ubuntu4
docker exec -it 5267e21d140 /bin/bash
echo "V2" >> /var/www/html/index.html
exit
docker commit 5267e21d140 denis_v2:latest

Export/Import Docker Image to file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker save image:tag > arch_name.tar
docker load -i arch_name.tar


Import/Export Docker Image to AWS ECR
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker build -t denis:v1 .
aws ecr get-login --no-include-email --region=ca-central-1 
docker tag  denis:v1  12345678.dkr.ecr.ca-central-1.amazonaws.com/myrepo:latest
docker push 12345678.dkr.ecr.ca-central-1.amazonaws.com/myrepo:lastest

docker pull 12345678.dkr.ecr.ca-central-1.amazonaws.com/myrepo:latest



Kill and Delete Containers and Images
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker rm -f $(docker ps -aq)        # Delete all Containers
docker rmi -f $(docker images -q)    # Delete all Images



